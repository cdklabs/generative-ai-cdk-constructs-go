package opensearchserverless

import (
	_jsii_ "github.com/aws/jsii-runtime-go/runtime"
	_init_ "github.com/cdklabs/generative-ai-cdk-constructs-go/generative-ai-cdk-constructs/jsii"

	"github.com/aws/aws-cdk-go/awscdk/v2"
	"github.com/aws/aws-cdk-go/awscdk/v2/awscloudwatch"
	"github.com/aws/aws-cdk-go/awscdk/v2/awsiam"
	"github.com/aws/aws-cdk-go/awscdk/v2/awsopensearchserverless"
	"github.com/aws/constructs-go/constructs/v10"
	"github.com/cdklabs/generative-ai-cdk-constructs-go/generative-ai-cdk-constructs/opensearchserverless/internal"
)

// Provides a vector search collection in Amazon OpenSearch Serverless.
// Experimental.
type VectorCollection interface {
	awscdk.Resource
	IVectorCollection
	// An IAM policy that allows API access to the collection.
	// Experimental.
	AossPolicy() awsiam.ManagedPolicy
	// The ARN of the collection.
	// Experimental.
	CollectionArn() *string
	// Experimental.
	CollectionEndpoint() *string
	// The ID of the collection.
	// Experimental.
	CollectionId() *string
	// The name of the collection.
	// Experimental.
	CollectionName() *string
	// Type of collection.
	// Experimental.
	CollectionType() VectorCollectionType
	// Experimental.
	DashboardEndpoint() *string
	// An OpenSearch Access Policy that allows access to the index.
	// Experimental.
	DataAccessPolicy() awsopensearchserverless.CfnAccessPolicy
	// The environment this resource belongs to.
	//
	// For resources that are created and managed by the CDK
	// (generally, those created by creating new class instances like Role, Bucket, etc.),
	// this is always the same as the environment of the stack they belong to;
	// however, for imported resources
	// (those obtained from static methods like fromRoleArn, fromBucketName, etc.),
	// that might be different than the stack they were imported into.
	// Experimental.
	Env() *awscdk.ResourceEnvironment
	// The tree node.
	// Experimental.
	Node() constructs.Node
	// Returns a string-encoded token that resolves to the physical name that should be passed to the CloudFormation resource.
	//
	// This value will resolve to one of the following:
	// - a concrete value (e.g. `"my-awesome-bucket"`)
	// - `undefined`, when a name should be generated by CloudFormation
	// - a concrete name generated automatically during synthesis, in
	//   cross-environment scenarios.
	// Experimental.
	PhysicalName() *string
	// The stack in which this resource is defined.
	// Experimental.
	Stack() awscdk.Stack
	// Indicates whether standby replicas are enabled.
	// Experimental.
	StandbyReplicas() VectorCollectionStandbyReplicas
	// Apply the given removal policy to this resource.
	//
	// The Removal Policy controls what happens to this resource when it stops
	// being managed by CloudFormation, either because you've removed it from the
	// CDK application or because you've made a change that requires the resource
	// to be replaced.
	//
	// The resource can be deleted (`RemovalPolicy.DESTROY`), or left in your AWS
	// account for data recovery and cleanup later (`RemovalPolicy.RETAIN`).
	// Experimental.
	ApplyRemovalPolicy(policy awscdk.RemovalPolicy)
	// Experimental.
	GeneratePhysicalName() *string
	// Returns an environment-sensitive token that should be used for the resource's "ARN" attribute (e.g. `bucket.bucketArn`).
	//
	// Normally, this token will resolve to `arnAttr`, but if the resource is
	// referenced across environments, `arnComponents` will be used to synthesize
	// a concrete ARN with the resource's physical name. Make sure to reference
	// `this.physicalName` in `arnComponents`.
	// Experimental.
	GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string
	// Returns an environment-sensitive token that should be used for the resource's "name" attribute (e.g. `bucket.bucketName`).
	//
	// Normally, this token will resolve to `nameAttr`, but if the resource is
	// referenced across environments, it will be resolved to `this.physicalName`,
	// which will be a concrete name.
	// Experimental.
	GetResourceNameAttribute(nameAttr *string) *string
	// Grants the specified role access to data in the collection.
	// Experimental.
	GrantDataAccess(grantee awsiam.IRole)
	// Return the given named metric for this VectorCollection.
	// Experimental.
	Metric(metricName *string, props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Metric for the number of index requests.
	// Experimental.
	MetricIndexRequestCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Metric for the search latency.
	// Experimental.
	MetricSearchLatency(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Metric for the 90th percentile search latency.
	// Experimental.
	MetricSearchLatencyP90(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Metric for the number of search requests.
	// Experimental.
	MetricSearchRequestCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Returns a string representation of this construct.
	// Experimental.
	ToString() *string
}

// The jsii proxy struct for VectorCollection
type jsiiProxy_VectorCollection struct {
	internal.Type__awscdkResource
	jsiiProxy_IVectorCollection
}

func (j *jsiiProxy_VectorCollection) AossPolicy() awsiam.ManagedPolicy {
	var returns awsiam.ManagedPolicy
	_jsii_.Get(
		j,
		"aossPolicy",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_VectorCollection) CollectionArn() *string {
	var returns *string
	_jsii_.Get(
		j,
		"collectionArn",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_VectorCollection) CollectionEndpoint() *string {
	var returns *string
	_jsii_.Get(
		j,
		"collectionEndpoint",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_VectorCollection) CollectionId() *string {
	var returns *string
	_jsii_.Get(
		j,
		"collectionId",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_VectorCollection) CollectionName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"collectionName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_VectorCollection) CollectionType() VectorCollectionType {
	var returns VectorCollectionType
	_jsii_.Get(
		j,
		"collectionType",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_VectorCollection) DashboardEndpoint() *string {
	var returns *string
	_jsii_.Get(
		j,
		"dashboardEndpoint",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_VectorCollection) DataAccessPolicy() awsopensearchserverless.CfnAccessPolicy {
	var returns awsopensearchserverless.CfnAccessPolicy
	_jsii_.Get(
		j,
		"dataAccessPolicy",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_VectorCollection) Env() *awscdk.ResourceEnvironment {
	var returns *awscdk.ResourceEnvironment
	_jsii_.Get(
		j,
		"env",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_VectorCollection) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_VectorCollection) PhysicalName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"physicalName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_VectorCollection) Stack() awscdk.Stack {
	var returns awscdk.Stack
	_jsii_.Get(
		j,
		"stack",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_VectorCollection) StandbyReplicas() VectorCollectionStandbyReplicas {
	var returns VectorCollectionStandbyReplicas
	_jsii_.Get(
		j,
		"standbyReplicas",
		&returns,
	)
	return returns
}


// Experimental.
func NewVectorCollection(scope constructs.Construct, id *string, props *VectorCollectionProps) VectorCollection {
	_init_.Initialize()

	if err := validateNewVectorCollectionParameters(scope, id, props); err != nil {
		panic(err)
	}
	j := jsiiProxy_VectorCollection{}

	_jsii_.Create(
		"@cdklabs/generative-ai-cdk-constructs.opensearchserverless.VectorCollection",
		[]interface{}{scope, id, props},
		&j,
	)

	return &j
}

// Experimental.
func NewVectorCollection_Override(v VectorCollection, scope constructs.Construct, id *string, props *VectorCollectionProps) {
	_init_.Initialize()

	_jsii_.Create(
		"@cdklabs/generative-ai-cdk-constructs.opensearchserverless.VectorCollection",
		[]interface{}{scope, id, props},
		v,
	)
}

// Import an existing collection using its attributes.
// Experimental.
func VectorCollection_FromCollectionAttributes(constructScope constructs.Construct, constructId *string, attrs *VectorCollectionAttributes) IVectorCollection {
	_init_.Initialize()

	if err := validateVectorCollection_FromCollectionAttributesParameters(constructScope, constructId, attrs); err != nil {
		panic(err)
	}
	var returns IVectorCollection

	_jsii_.StaticInvoke(
		"@cdklabs/generative-ai-cdk-constructs.opensearchserverless.VectorCollection",
		"fromCollectionAttributes",
		[]interface{}{constructScope, constructId, attrs},
		&returns,
	)

	return returns
}

// Checks if `x` is a construct.
//
// Use this method instead of `instanceof` to properly detect `Construct`
// instances, even when the construct library is symlinked.
//
// Explanation: in JavaScript, multiple copies of the `constructs` library on
// disk are seen as independent, completely different libraries. As a
// consequence, the class `Construct` in each copy of the `constructs` library
// is seen as a different class, and an instance of one class will not test as
// `instanceof` the other class. `npm install` will not create installations
// like this, but users may manually symlink construct libraries together or
// use a monorepo tool: in those cases, multiple copies of the `constructs`
// library can be accidentally installed, and `instanceof` will behave
// unpredictably. It is safest to avoid using `instanceof`, and using
// this type-testing method instead.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
// Experimental.
func VectorCollection_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	if err := validateVectorCollection_IsConstructParameters(x); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@cdklabs/generative-ai-cdk-constructs.opensearchserverless.VectorCollection",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Returns true if the construct was created by CDK, and false otherwise.
// Experimental.
func VectorCollection_IsOwnedResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateVectorCollection_IsOwnedResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@cdklabs/generative-ai-cdk-constructs.opensearchserverless.VectorCollection",
		"isOwnedResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

// Check whether the given construct is a Resource.
// Experimental.
func VectorCollection_IsResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateVectorCollection_IsResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@cdklabs/generative-ai-cdk-constructs.opensearchserverless.VectorCollection",
		"isResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

// Return metrics for all vector collections.
// Experimental.
func VectorCollection_MetricAll(metricName *string, props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	_init_.Initialize()

	if err := validateVectorCollection_MetricAllParameters(metricName, props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.StaticInvoke(
		"@cdklabs/generative-ai-cdk-constructs.opensearchserverless.VectorCollection",
		"metricAll",
		[]interface{}{metricName, props},
		&returns,
	)

	return returns
}

// Metric for the total number of index requests across all collections.
// Experimental.
func VectorCollection_MetricAllIndexRequestCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	_init_.Initialize()

	if err := validateVectorCollection_MetricAllIndexRequestCountParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.StaticInvoke(
		"@cdklabs/generative-ai-cdk-constructs.opensearchserverless.VectorCollection",
		"metricAllIndexRequestCount",
		[]interface{}{props},
		&returns,
	)

	return returns
}

// Metric for average search latency across all collections.
// Experimental.
func VectorCollection_MetricAllSearchLatency(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	_init_.Initialize()

	if err := validateVectorCollection_MetricAllSearchLatencyParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.StaticInvoke(
		"@cdklabs/generative-ai-cdk-constructs.opensearchserverless.VectorCollection",
		"metricAllSearchLatency",
		[]interface{}{props},
		&returns,
	)

	return returns
}

// Metric for the total number of search requests across all collections.
// Experimental.
func VectorCollection_MetricAllSearchRequestCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	_init_.Initialize()

	if err := validateVectorCollection_MetricAllSearchRequestCountParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.StaticInvoke(
		"@cdklabs/generative-ai-cdk-constructs.opensearchserverless.VectorCollection",
		"metricAllSearchRequestCount",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (v *jsiiProxy_VectorCollection) ApplyRemovalPolicy(policy awscdk.RemovalPolicy) {
	if err := v.validateApplyRemovalPolicyParameters(policy); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		v,
		"applyRemovalPolicy",
		[]interface{}{policy},
	)
}

func (v *jsiiProxy_VectorCollection) GeneratePhysicalName() *string {
	var returns *string

	_jsii_.Invoke(
		v,
		"generatePhysicalName",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (v *jsiiProxy_VectorCollection) GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string {
	if err := v.validateGetResourceArnAttributeParameters(arnAttr, arnComponents); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		v,
		"getResourceArnAttribute",
		[]interface{}{arnAttr, arnComponents},
		&returns,
	)

	return returns
}

func (v *jsiiProxy_VectorCollection) GetResourceNameAttribute(nameAttr *string) *string {
	if err := v.validateGetResourceNameAttributeParameters(nameAttr); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		v,
		"getResourceNameAttribute",
		[]interface{}{nameAttr},
		&returns,
	)

	return returns
}

func (v *jsiiProxy_VectorCollection) GrantDataAccess(grantee awsiam.IRole) {
	if err := v.validateGrantDataAccessParameters(grantee); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		v,
		"grantDataAccess",
		[]interface{}{grantee},
	)
}

func (v *jsiiProxy_VectorCollection) Metric(metricName *string, props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := v.validateMetricParameters(metricName, props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		v,
		"metric",
		[]interface{}{metricName, props},
		&returns,
	)

	return returns
}

func (v *jsiiProxy_VectorCollection) MetricIndexRequestCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := v.validateMetricIndexRequestCountParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		v,
		"metricIndexRequestCount",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (v *jsiiProxy_VectorCollection) MetricSearchLatency(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := v.validateMetricSearchLatencyParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		v,
		"metricSearchLatency",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (v *jsiiProxy_VectorCollection) MetricSearchLatencyP90(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := v.validateMetricSearchLatencyP90Parameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		v,
		"metricSearchLatencyP90",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (v *jsiiProxy_VectorCollection) MetricSearchRequestCount(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := v.validateMetricSearchRequestCountParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		v,
		"metricSearchRequestCount",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (v *jsiiProxy_VectorCollection) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		v,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

