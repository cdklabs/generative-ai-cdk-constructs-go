package neptune

import (
	_jsii_ "github.com/aws/jsii-runtime-go/runtime"
	_init_ "github.com/cdklabs/generative-ai-cdk-constructs-go/generative-ai-cdk-constructs/jsii"

	"github.com/aws/aws-cdk-go/awscdk/v2"
	"github.com/aws/aws-cdk-go/awscdk/v2/awscloudwatch"
	"github.com/aws/aws-cdk-go/awscdk/v2/awsiam"
	"github.com/aws/constructs-go/constructs/v10"
	"github.com/cdklabs/generative-ai-cdk-constructs-go/generative-ai-cdk-constructs/neptune/internal"
)

// Abstract base class for a Neptune Graph.
//
// Contains methods and attributes valid for Graphs either created with CDK or imported.
// Experimental.
type NeptuneGraphBase interface {
	awscdk.Resource
	INeptuneGraph
	// The environment this resource belongs to.
	//
	// For resources that are created and managed by the CDK
	// (generally, those created by creating new class instances like Role, Bucket, etc.),
	// this is always the same as the environment of the stack they belong to;
	// however, for imported resources
	// (those obtained from static methods like fromRoleArn, fromBucketName, etc.),
	// that might be different than the stack they were imported into.
	// Experimental.
	Env() *awscdk.ResourceEnvironment
	// The Neptune Graph ARN.
	// Experimental.
	GraphArn() *string
	// The Neptune Graph endpoint.
	// Experimental.
	GraphEndpoint() *string
	// The Neptune Graph Identifier.
	// Experimental.
	GraphId() *string
	// The tree node.
	// Experimental.
	Node() constructs.Node
	// Returns a string-encoded token that resolves to the physical name that should be passed to the CloudFormation resource.
	//
	// This value will resolve to one of the following:
	// - a concrete value (e.g. `"my-awesome-bucket"`)
	// - `undefined`, when a name should be generated by CloudFormation
	// - a concrete name generated automatically during synthesis, in
	//   cross-environment scenarios.
	// Experimental.
	PhysicalName() *string
	// The stack in which this resource is defined.
	// Experimental.
	Stack() awscdk.Stack
	// Apply the given removal policy to this resource.
	//
	// The Removal Policy controls what happens to this resource when it stops
	// being managed by CloudFormation, either because you've removed it from the
	// CDK application or because you've made a change that requires the resource
	// to be replaced.
	//
	// The resource can be deleted (`RemovalPolicy.DESTROY`), or left in your AWS
	// account for data recovery and cleanup later (`RemovalPolicy.RETAIN`).
	// Experimental.
	ApplyRemovalPolicy(policy awscdk.RemovalPolicy)
	// Creates a Neptune Graph Notebook for the graph.
	//
	// Defaults to a ml.t3.medium instance type.
	// **Note: Creating a notebook will incur additional AWS costs for the notebook instance.**
	// Experimental.
	CreateNotebook(params *NeptuneGraphNotebookProps) NeptuneGraphNotebook
	// Experimental.
	GeneratePhysicalName() *string
	// Returns an environment-sensitive token that should be used for the resource's "ARN" attribute (e.g. `bucket.bucketArn`).
	//
	// Normally, this token will resolve to `arnAttr`, but if the resource is
	// referenced across environments, `arnComponents` will be used to synthesize
	// a concrete ARN with the resource's physical name. Make sure to reference
	// `this.physicalName` in `arnComponents`.
	// Experimental.
	GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string
	// Returns an environment-sensitive token that should be used for the resource's "name" attribute (e.g. `bucket.bucketName`).
	//
	// Normally, this token will resolve to `nameAttr`, but if the resource is
	// referenced across environments, it will be resolved to `this.physicalName`,
	// which will be a concrete name.
	// Experimental.
	GetResourceNameAttribute(nameAttr *string) *string
	// Grant the given principal identity permissions to perform actions on this agent alias.
	// Experimental.
	Grant(grantee awsiam.IGrantable, actions *[]*string) awsiam.Grant
	// Grant the given identity the permissions to export the graph into columnar structured .csv and .parquet files.
	// Experimental.
	GrantExportTask(grantee awsiam.IGrantable) awsiam.Grant
	// Grant the given identity full access to the Graph.
	// Experimental.
	GrantFullAccess(grantee awsiam.IGrantable) awsiam.Grant
	// Grant the given identity the permissions to query the Graph.
	// Experimental.
	GrantQuery(grantee awsiam.IGrantable) awsiam.Grant
	// Grant the given identity the permissions to read the Graph.
	// Experimental.
	GrantReadOnly(grantee awsiam.IGrantable) awsiam.Grant
	// Return the given named metric for this graph.
	//
	// By default, the metric will be calculated as a sum over a period of 5 minutes.
	// You can customize this by using the `statistic` and `period` properties.
	// Experimental.
	Metric(metricName *string, props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Returns metric for CPU utilization.
	// Experimental.
	MetricCPUUtilization(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Returns metric for graph size in bytes.
	// Experimental.
	MetricGraphSizeBytes(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Returns metric for graph storage usage percentage.
	// Experimental.
	MetricGraphStorageUsagePercent(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Returns metric for number of edge properties.
	// Experimental.
	MetricNumEdgeProperties(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Returns metric for number of edges.
	// Experimental.
	MetricNumEdges(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Returns metric for number of OpenCypher client errors per second.
	// Experimental.
	MetricNumOpenCypherClientErrorsPerSec(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Returns metric for number of OpenCypher requests per second.
	// Experimental.
	MetricNumOpenCypherRequestsPerSec(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Returns metric for number of OpenCypher server errors per second.
	// Experimental.
	MetricNumOpenCypherServerErrorsPerSec(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Returns metric for number of queued requests per second.
	// Experimental.
	MetricNumQueuedRequestsPerSec(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Returns metric for number of vectors.
	// Experimental.
	MetricNumVectors(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Returns metric for number of vertex properties.
	// Experimental.
	MetricNumVertexProperties(props *awscloudwatch.MetricOptions) awscloudwatch.Metric
	// Returns a string representation of this construct.
	// Experimental.
	ToString() *string
}

// The jsii proxy struct for NeptuneGraphBase
type jsiiProxy_NeptuneGraphBase struct {
	internal.Type__awscdkResource
	jsiiProxy_INeptuneGraph
}

func (j *jsiiProxy_NeptuneGraphBase) Env() *awscdk.ResourceEnvironment {
	var returns *awscdk.ResourceEnvironment
	_jsii_.Get(
		j,
		"env",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_NeptuneGraphBase) GraphArn() *string {
	var returns *string
	_jsii_.Get(
		j,
		"graphArn",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_NeptuneGraphBase) GraphEndpoint() *string {
	var returns *string
	_jsii_.Get(
		j,
		"graphEndpoint",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_NeptuneGraphBase) GraphId() *string {
	var returns *string
	_jsii_.Get(
		j,
		"graphId",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_NeptuneGraphBase) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_NeptuneGraphBase) PhysicalName() *string {
	var returns *string
	_jsii_.Get(
		j,
		"physicalName",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_NeptuneGraphBase) Stack() awscdk.Stack {
	var returns awscdk.Stack
	_jsii_.Get(
		j,
		"stack",
		&returns,
	)
	return returns
}


// Experimental.
func NewNeptuneGraphBase_Override(n NeptuneGraphBase, scope constructs.Construct, id *string, props *awscdk.ResourceProps) {
	_init_.Initialize()

	_jsii_.Create(
		"@cdklabs/generative-ai-cdk-constructs.neptune.NeptuneGraphBase",
		[]interface{}{scope, id, props},
		n,
	)
}

// Checks if `x` is a construct.
//
// Use this method instead of `instanceof` to properly detect `Construct`
// instances, even when the construct library is symlinked.
//
// Explanation: in JavaScript, multiple copies of the `constructs` library on
// disk are seen as independent, completely different libraries. As a
// consequence, the class `Construct` in each copy of the `constructs` library
// is seen as a different class, and an instance of one class will not test as
// `instanceof` the other class. `npm install` will not create installations
// like this, but users may manually symlink construct libraries together or
// use a monorepo tool: in those cases, multiple copies of the `constructs`
// library can be accidentally installed, and `instanceof` will behave
// unpredictably. It is safest to avoid using `instanceof`, and using
// this type-testing method instead.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
// Experimental.
func NeptuneGraphBase_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	if err := validateNeptuneGraphBase_IsConstructParameters(x); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@cdklabs/generative-ai-cdk-constructs.neptune.NeptuneGraphBase",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

// Returns true if the construct was created by CDK, and false otherwise.
// Experimental.
func NeptuneGraphBase_IsOwnedResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateNeptuneGraphBase_IsOwnedResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@cdklabs/generative-ai-cdk-constructs.neptune.NeptuneGraphBase",
		"isOwnedResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

// Check whether the given construct is a Resource.
// Experimental.
func NeptuneGraphBase_IsResource(construct constructs.IConstruct) *bool {
	_init_.Initialize()

	if err := validateNeptuneGraphBase_IsResourceParameters(construct); err != nil {
		panic(err)
	}
	var returns *bool

	_jsii_.StaticInvoke(
		"@cdklabs/generative-ai-cdk-constructs.neptune.NeptuneGraphBase",
		"isResource",
		[]interface{}{construct},
		&returns,
	)

	return returns
}

func (n *jsiiProxy_NeptuneGraphBase) ApplyRemovalPolicy(policy awscdk.RemovalPolicy) {
	if err := n.validateApplyRemovalPolicyParameters(policy); err != nil {
		panic(err)
	}
	_jsii_.InvokeVoid(
		n,
		"applyRemovalPolicy",
		[]interface{}{policy},
	)
}

func (n *jsiiProxy_NeptuneGraphBase) CreateNotebook(params *NeptuneGraphNotebookProps) NeptuneGraphNotebook {
	if err := n.validateCreateNotebookParameters(params); err != nil {
		panic(err)
	}
	var returns NeptuneGraphNotebook

	_jsii_.Invoke(
		n,
		"createNotebook",
		[]interface{}{params},
		&returns,
	)

	return returns
}

func (n *jsiiProxy_NeptuneGraphBase) GeneratePhysicalName() *string {
	var returns *string

	_jsii_.Invoke(
		n,
		"generatePhysicalName",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (n *jsiiProxy_NeptuneGraphBase) GetResourceArnAttribute(arnAttr *string, arnComponents *awscdk.ArnComponents) *string {
	if err := n.validateGetResourceArnAttributeParameters(arnAttr, arnComponents); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		n,
		"getResourceArnAttribute",
		[]interface{}{arnAttr, arnComponents},
		&returns,
	)

	return returns
}

func (n *jsiiProxy_NeptuneGraphBase) GetResourceNameAttribute(nameAttr *string) *string {
	if err := n.validateGetResourceNameAttributeParameters(nameAttr); err != nil {
		panic(err)
	}
	var returns *string

	_jsii_.Invoke(
		n,
		"getResourceNameAttribute",
		[]interface{}{nameAttr},
		&returns,
	)

	return returns
}

func (n *jsiiProxy_NeptuneGraphBase) Grant(grantee awsiam.IGrantable, actions *[]*string) awsiam.Grant {
	if err := n.validateGrantParameters(grantee, actions); err != nil {
		panic(err)
	}
	var returns awsiam.Grant

	_jsii_.Invoke(
		n,
		"grant",
		[]interface{}{grantee, actions},
		&returns,
	)

	return returns
}

func (n *jsiiProxy_NeptuneGraphBase) GrantExportTask(grantee awsiam.IGrantable) awsiam.Grant {
	if err := n.validateGrantExportTaskParameters(grantee); err != nil {
		panic(err)
	}
	var returns awsiam.Grant

	_jsii_.Invoke(
		n,
		"grantExportTask",
		[]interface{}{grantee},
		&returns,
	)

	return returns
}

func (n *jsiiProxy_NeptuneGraphBase) GrantFullAccess(grantee awsiam.IGrantable) awsiam.Grant {
	if err := n.validateGrantFullAccessParameters(grantee); err != nil {
		panic(err)
	}
	var returns awsiam.Grant

	_jsii_.Invoke(
		n,
		"grantFullAccess",
		[]interface{}{grantee},
		&returns,
	)

	return returns
}

func (n *jsiiProxy_NeptuneGraphBase) GrantQuery(grantee awsiam.IGrantable) awsiam.Grant {
	if err := n.validateGrantQueryParameters(grantee); err != nil {
		panic(err)
	}
	var returns awsiam.Grant

	_jsii_.Invoke(
		n,
		"grantQuery",
		[]interface{}{grantee},
		&returns,
	)

	return returns
}

func (n *jsiiProxy_NeptuneGraphBase) GrantReadOnly(grantee awsiam.IGrantable) awsiam.Grant {
	if err := n.validateGrantReadOnlyParameters(grantee); err != nil {
		panic(err)
	}
	var returns awsiam.Grant

	_jsii_.Invoke(
		n,
		"grantReadOnly",
		[]interface{}{grantee},
		&returns,
	)

	return returns
}

func (n *jsiiProxy_NeptuneGraphBase) Metric(metricName *string, props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := n.validateMetricParameters(metricName, props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		n,
		"metric",
		[]interface{}{metricName, props},
		&returns,
	)

	return returns
}

func (n *jsiiProxy_NeptuneGraphBase) MetricCPUUtilization(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := n.validateMetricCPUUtilizationParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		n,
		"metricCPUUtilization",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (n *jsiiProxy_NeptuneGraphBase) MetricGraphSizeBytes(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := n.validateMetricGraphSizeBytesParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		n,
		"metricGraphSizeBytes",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (n *jsiiProxy_NeptuneGraphBase) MetricGraphStorageUsagePercent(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := n.validateMetricGraphStorageUsagePercentParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		n,
		"metricGraphStorageUsagePercent",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (n *jsiiProxy_NeptuneGraphBase) MetricNumEdgeProperties(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := n.validateMetricNumEdgePropertiesParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		n,
		"metricNumEdgeProperties",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (n *jsiiProxy_NeptuneGraphBase) MetricNumEdges(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := n.validateMetricNumEdgesParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		n,
		"metricNumEdges",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (n *jsiiProxy_NeptuneGraphBase) MetricNumOpenCypherClientErrorsPerSec(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := n.validateMetricNumOpenCypherClientErrorsPerSecParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		n,
		"metricNumOpenCypherClientErrorsPerSec",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (n *jsiiProxy_NeptuneGraphBase) MetricNumOpenCypherRequestsPerSec(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := n.validateMetricNumOpenCypherRequestsPerSecParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		n,
		"metricNumOpenCypherRequestsPerSec",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (n *jsiiProxy_NeptuneGraphBase) MetricNumOpenCypherServerErrorsPerSec(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := n.validateMetricNumOpenCypherServerErrorsPerSecParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		n,
		"metricNumOpenCypherServerErrorsPerSec",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (n *jsiiProxy_NeptuneGraphBase) MetricNumQueuedRequestsPerSec(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := n.validateMetricNumQueuedRequestsPerSecParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		n,
		"metricNumQueuedRequestsPerSec",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (n *jsiiProxy_NeptuneGraphBase) MetricNumVectors(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := n.validateMetricNumVectorsParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		n,
		"metricNumVectors",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (n *jsiiProxy_NeptuneGraphBase) MetricNumVertexProperties(props *awscloudwatch.MetricOptions) awscloudwatch.Metric {
	if err := n.validateMetricNumVertexPropertiesParameters(props); err != nil {
		panic(err)
	}
	var returns awscloudwatch.Metric

	_jsii_.Invoke(
		n,
		"metricNumVertexProperties",
		[]interface{}{props},
		&returns,
	)

	return returns
}

func (n *jsiiProxy_NeptuneGraphBase) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		n,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

